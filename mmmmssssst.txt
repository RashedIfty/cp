-------MCS 1---------------
//ID----> C211035
#include<bits/stdc++.h>
using namespace std;

int m[50][50] , s[50][50];

void Matrix_Chain_Order(int p[],int n1)
{
    int n = n1 - 1;

    //int m[n][n] , s[n][n];

    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=n; j++)
            m[i][j] = 0;
    }

    for(int l =2; l<=n; l++)
    {
        for(int i =l ; i<=(n-l+1); i++)
        {
            int j = i+l-1;
            m[i][j] = INT_MAX;

            for(int k=i; k<=j-1; k++)
            {
                int q = m[i][k] + m[k+1][j]+(p[i-1]*p[k]*p[i]);

                if(q < m[i][j])
                {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
            cout<<"m[ "<<i<<" ][ "<<j<<" ] = "<<m[i][j];
            cout<<" s[ "<<i<<" ][ "<<j<<" ] = "<<s[i][j]<<endl;
        }
    }

}

void Print_Optimal_Parens(int i,int j)
{
    if(i==j)
        cout<<"A"<<i;
        //cout<<"A"<<endl;
    else
    {
        cout<<"(";
        Print_Optimal_Parens(i,s[i][j]);
        Print_Optimal_Parens(s[i][j]+1,j);
        cout<<")"<<endl;
    }
}

int main()
{
    int n1;
    cout<<"Enter input array how many index ";
    cin>>n1;

    int p[n1+5];

    for(int i=1; i<=n1; i++)
        cin>>p[i];

    Matrix_Chain_Order(p,n1);

   // Print_Optimal_Parens(s,1,n1);
   Print_Optimal_Parens(1,n1);

}

-------MCS 2-----------------
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define vl vector<ll>
#define vs vector<string>
#define vc vector<char>
#define pb push_back
#define rv(v) reverse(v.begin(),v.end())
#define sv(v) sort(v.begin(),v.end())
#define pv(v) for(ll i=0;i<v.size();i++) cout<<v[i]<<endl
#define cv(n,x,v) for(ll i=0;i<n;i++) {cin>>x;v.push_back(x);}
#define loop(n) for(int i=0;i<n;i++)
#define nl endl
#define bigint 9999999
int m_table[100][100], s_table[100][100];
void Print_Optimal_Parens(int i,int j)
{
    if(i==j)
        printf("A%d",i);

    else
    {
        printf("(");
        Print_Optimal_Parens(i,s_table[i][j]);
        Print_Optimal_Parens(s_table[i][j]+1,j);
        printf(")");
    }
}
void fun()
{
    ll co=0,co1=0,co2=0,co3=0,count=0,f=0,f1=0,f2=0,f3=0,flag=0;
    ll i,j,k,l,a,m,n,o,b,c,d,e,x,y,z,tmp,temp;
    string s,s1,s2,s3;
    char c1,c2;
    cin>>n;
    int p[n+10];
    for(i=0;i<=n;i++)
    {
        cin>>p[i];
    }
    for(i=1;i<=n;i++)
        m_table[i][i] = 0;
    for(a=2;a<=n;a++)
    {
        for(i=1;i<=n-a+1;i++)
        {
            j=i+a-1;
            m_table[i][j] = 9999999;
            for(k=1;k<j;k++)
            {
                b = m_table[i][k]+m_table[k+1][j]+p[i-1]*p[k]*p[j];
                if(b<m_table[i][j])
                {
                    m_table[i][j]=b;
                    s_table[i][j]=k;
                }
            }
            // cout<<"i: "<<i<<" j: "<<j<<" m[i,j]= "<<m_table[i][j]<<" ";
            // cout<<"s[i,j]= "<<s_table[i][j]<<nl;
        }
    }
    Print_Optimal_Parens(1,n);


}
int main()
{
    ll t;
    t=1;
    //cin>>t;
    while(t--)
        fun();
  return 0;

}

-------------MCM--------------------
#include <bits/stdc++.h>
using namespace std;

int MatrixChainOrder(int p[], int n)
{


    int m[n+10][n+10];


    for (int i = 1; i < n; i++)
    {
        m[i][i] = 0;
    }

    for (int L = 2; L < n; L++)
    {
        for (int i = 1; i < n - L + 1; i++)
        {
            int j = i + L - 1;
            m[i][j] = INT_MAX;
            for (int k = i; k <= j - 1; k++)
            {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j])
                {
                    m[i][j] = q;
                }
            }
        }
    }

    return m[1][n - 1];
}


int main()
{
    int arr[] = { 1, 2, 3, 4 };
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, size);

    getchar();
    return 0;
}

-----------LCS 1 2------------------------
/*#include<bits/stdc++.h>
using namespace std;

int b[20][20],c[20][20];

void LCS_length(string x,string y)
{
    int m = 7;
    int n = 6;

    //string b[m][n];

    int c[m][n];

    for(int i=1; i<=m; i++)
        c[i][0] = 0;

    for(int j=0; j<=n; j++)
        c[0][j] = 0;

    for(int i=1; i<=m; i++)
    {
        for(int j=1; j<=n; j++)
        {
            if(x[i] == y[i])
            {
                c[i][j] = c[i-1][j-1]+1;
                b[i][j] = 0;
            }

            else if(c[i-1][j]>=c[i][j-1])
            {
                c[i][j] = c[i-1][j];
                b[i][j] = 1;
            }
            else
            {
                c[i][j] = c[i][j-1];
                b[i][j] = 2;
            }
        }
    }
}

void Print_LCS( string x, int i, int j)
{
    if(i==0 || j==0)
        return;

    if( b[i][j] == 0 )
      {
          Print_LCS(x,i-1,j-1);
          cout<<x[i];
      }
    else if(b[i][j] == 1 )
        Print_LCS(x,i-1,j);
    else
        Print_LCS(x,i,j-1);
}

int main()
{
    string x = "ABCBDAB";
    string y = "BDCABA";


    LCS_length(x,y);

    Print_LCS(x,7,7);
}*/

#include<bits/stdc++.h>
using namespace std;

int i,j,m,n,a,c[20][20];
char x[15],y[15],b[20][20];


void print_lcs(int i, int j)
{
    if(i==0 || j==0)
        return;

    if(b[i][j] == 'c')
    {
        print_lcs(i-1,j-1);
        cout<<x[i-1];
    }

    else if(b[i][j] == 'u')
    {
        print_lcs(i-1,j);
    }

    else
      print_lcs(i,j-1);

}

void lcs_length(void)
 {
     m = strlen(x);
     n = strlen(y);

     for(i=0; i<=m; i++)
        c[i][0] = 0;

     for(i=0; i<=n; i++)
        c[0][i] = 0;

     for(i=1; i<=m; i++)

         for(j=1; j<=n; j++)
         {
             if(x[i-1] == y[j-1])
             {
                 c[i][j] = c[i-1][j-1] +1;
                 b[i][j] = 'c';
             }

             else if(c[i-1][j] >= c[i][j-1])
             {
                 c[i][j] = c[i-1][j];
                 b[i][j] = 'u';
             }

             else
             {
                 c[i][j] = c[i][j-1];
                 b[i][j] = '1';
             }
         }
         print_lcs(m,n);

}


 int main()
 {
     cout<<"Enter 1st sequence : ";
     cin>>x;
     cout<<"Enter 2nd sequence : ";
     cin>>y;

     cout<<"\nlongest common subsequence is : "<<lcs_length;

     return 0;
 }

-----------LCS 3--------------------
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define vl vector<ll>
#define vs vector<string>
#define vc vector<char>
#define pb push_back
#define rv(v) reverse(v.begin(),v.end())
#define sv(v) sort(v.begin(),v.end())
#define pv(v) for(ll i=0;i<v.size();i++) cout<<v[i]<<endl
#define cv(n,x,v) for(ll i=0;i<n;i++) {cin>>x;v.push_back(x);}
#define loop(n) for(int i=0;i<n;i++)
#define nl endl
void fun()
{
    ll co=0,co1=0,co2=0,co3=0,count=0,f=0,f1=0,f2=0,f3=0,flag=0;
    ll i,j,k,l,a,m,n,o,b,c,d,e,x,y,z,tmp,temp;
    string s,s1,s2,s3;
    char c1,c2;
    cin>>s1>>s2;
    //cout<<s1.size()<<" "<<s2.size()<<nl;
    ll arr[s1.size()+10][s2.size()+10];

    for(i=0;i<=s1.size();i++)
    {
        for(j=0;j<=s2.size();j++)
        {
            if(i==0 || j==0)
                arr[i][j]=0;
            else if(s1[i-1]==s2[j-1])
                arr[i][j] = arr[i-1][j-1]+1;
            else
                arr[i][j]=max(arr[i-1][j],arr[i][j-1]);
        }
    }

    for(i=0;i<=s1.size();i++)
    {
        for(j=0;j<=s2.size();j++)
            cout<<arr[i][j]<<" ";
        cout<<nl;
    }
    vc v;
    i = s1.size();j=s2.size();
    while(i>0 && j>0)
    {
        if(s1[i-1]==s2[j-1])
        {
            v.pb(s1[i-1]);
            i--;j--;
        }
        else if(arr[i-1][j]>arr[i][j-1])
            i--;
        else
            j--;
    }
    rv(v);
    for(i=0;i<v.size();i++)
        cout<<v[i];
    cout<<nl;



}
int main()
{
    ll t;
    //t=1;
    cin>>t;
    while(t--)
        fun();

return 0;
}

-------------Dijks-----------------
#include <bits/stdc++.h>
using namespace std;

#define debug(x) cout<<#x<<" is "<<endl

using ll = long long;

#define x first
#define y second

template <typename T>
struct Dijkstra {

	int node,edge;
	vector< vector< pair<int,T> > > adj;
	vector< T > level;
	vector<int> parent;

	Dijkstra(int _node, int _edge) : node(_node), edge(_edge) {
		vector<int>(node+1).swap(parent);
		vector<T>(node+1, numeric_limits<T>::max()).swap(level);
		vector< vector< pair<int,T> > > (node+1).swap(adj);
	}

	void add_edge(int u, int v, T w) {
		adj[u].push_back({v,w});
		adj[v].push_back({u,w});
	}

	void traverse(int src) {

		level[src] = 0;
		set< pair<T,int> > s {{0,src}};
		parent[src] = -1;

		while(not s.empty()) {
			auto it = *s.begin();
			int cur_node = it.y;
			T cur_level = it.x;
			s.erase(s.begin());

			for(auto u : adj[cur_node]) {
				if(level[u.x] - u.y > cur_level) {
					level[u.x] = cur_level + u.y;
					parent[u.x] = cur_node; 
					s.insert({level[u.x],u.x});
				}
			}
		}
	}

	void print_path(int x) {

		if(level[x] == numeric_limits<T>::max()) {
			cout<<"-1\n";
			return;
		}

		if(x == -1){
			return;
		}

		print_path(parent[x]);
		cout<<x<<" ";

	}

};


int main(int argc, char const *argv[])
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);


	int node,edge;
	cin>>node>>edge;

	Dijkstra<ll> d(node,edge);


	while(edge--){
		int x,y;
		ll w;
		cin>>x>>y>>w;
		d.add_edge(x,y,w);
	}

	d.traverse(1);
	d.print_path(node);

	return 0;
}

----------DIjks 2-------------------
#include <bits/stdc++.h>
using namespace std;
int n, e; //nodes, edges
vector<vector<pair<int, int> > > adj; //first is adjecent node, second is edge cost
struct node
{
    int x, cst;
    node(int x, int cst) :
        x(x), cst(cst)
    {
    }
    bool operator<(const node &a) const
    {
        return a.cst < cst;
    }
};
int dijk(int src, int des)
{
    vector<int> cost(n + 1, 1e9);
    priority_queue<node> que;
    que.push(node(src, 0));
    cost[src] = 0;
    while (que.size())
    {
        int x = que.top().x, cst = que.top().cst;
        que.pop();
        if (x == des)
        {
            return cst;
        }
        for (int i = 0, ln = adj[x].size(); i < ln; ++i)
        {
            int y = adj[x][i].first, _cst = adj[x][i].second;
            if (cst + _cst < cost[y])
            {
                cost[y] = cst + _cst;
                que.push(node(y, cost[y]));
            }
        }
    }
}
int main()
{

    int q;
    cin >> n >> e; // qeuery
    adj.clear();
    adj.resize(n + 1);
    while (e--)
    {
        int x, y, z; //pair of nodes, cost
        cin >> x >> y >> z;
        adj[x].push_back(make_pair(y, z));
    }

    int src, des;
    cin >> src >> des;
    cout << dijk(src, des) << endl;

    return 0;
}


/*
6 7
1 2 1
1 3 5
1 4 7
2 5 50
3 5 20
4 6 7
6 5 7
1 5
*/