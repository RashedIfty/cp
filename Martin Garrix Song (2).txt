
    // https://controlc.com/f144caf0

 /*
         BFS
   9 9
   1 2
   1 5
   2 3
   2 4
   5 6
   5 7
   6 9
   6 9
   7 8
   6
   3
*/

#include<bits/stdc++.h>
using namespace std;


int main()
{

    int n,e;
    cin>>n>>e;
    vector<vector<int>>adj(n+1);
    vector<int>par(n+1,-1);

    for(int i=0; i<e; i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int s;
    cin>>s;

    vector<int>level(n+1,-1);
    level[s] = 0;
    queue<int>q;
    q.push(s);

    while(!q.empty())
    {
        int u = q.front();
        q.pop();

        for(int v: adj[u])
        {
            if(level[v] == -1)
            {
                level[v] = level[u]+1;
                par[v] = u;
                q.push(v);
            }
        }
    }

    for(int i=1; i<=n; i++)
        cout<<level[i]<<" ";

    int u,v;
    cin>>v;
    vector<int>path;

    path.push_back(v);

    while(par[v]!=-1)
    {
        path.push_back(par[v]);
        v= par[v];
    }

    for(auto i:path)
    {
        cout<<i<<"-->";
    }
}





  /* input BFS
   5 5
   .....
   ..#.S
   ..#..
   D....
   .....
   */

#include<bits/stdc++.h>
using namespace std;

int n,m;
vector<string>grid;

bool invalid(int x, int y)
{
    return x<n && x>=0 && y<m && y>=0 && grid[x][y] !='#';
}


int main()
{
    cin>>n>>m;

    pair<int,int>s,d;

    grid = vector<string>(n);

    for(int i=0; i<n; i++)
    {
        cin>>grid[i];
        for(int j=0; j<m; j++)
        {
            if(grid[i][j]=='S')
            {
                s.first = i;
                s.second = j;
            }
            if(grid[i][j]=='D')
            {
                d.first = i;
                d.second = j;
            }

        }
    }

    int level[100][100];
    memset(level,-1,sizeof(level));

    int dx[] = {-1,1,0,0};
    int dy[] = {0,0,-1,1};

    /*for(int i=0; i<4; i++)
    {
        {u.first+ dx[i],u.second+dy[i]}
    }*/

    level[s.first][s.second] = 0;
    queue<pair<int,int>>q;

    q.push(s);

    while(!q.empty())
    {
        pair<int,int>u;
        u = q.front();
        q.pop();

        for(int k=0; k<4;k++)
        {
            pair<int,int>v;
            v={u.first+dx[k],u.second+dy[k]};

            if(invalid(v.first,v.second) && level[v.first][v.second] == -1)
            {
                level[v.first][v.second] = level[u.first][u.second]+1;
                q.push(v);
            }
        }
    }

    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            cout<<level[i][j]<<" ";
        }
         cout<<endl;
    }

    cout<<level[d.first][d.second]<<endl;


}




  /* input MultiSource BFS
   5 5
   .....
   .D#.S
   ..#S.
   .....
   S....
   */

#include<bits/stdc++.h>
using namespace std;

int n,m;
vector<string>grid;

bool invalid(int x, int y)
{
    return x<n && x>=0 && y<m && y>=0 && grid[x][y] !='#';
}


int main()
{
    cin>>n>>m;

    pair<int,int>s,d;

    grid = vector<string>(n);

    queue<pair<int,int>>q;
    int level[100][100];
    memset(level,-1,sizeof(level));

    for(int i=0; i<n; i++)
    {
        cin>>grid[i];
        for(int j=0; j<m; j++)
        {
            if(grid[i][j]=='S')
            {
                s.first = i;
                s.second = j;
                level[s.first][s.second] = 0;
                q.push(s);
            }
            if(grid[i][j]=='D')
            {
                d.first = i;
                d.second = j;
            }

        }
    }


    int dx[] = {-1,1,0,0};
    int dy[] = {0,0,-1,1};

    /*for(int i=0; i<4; i++)
    {
        {u.first+ dx[i],u.second+dy[i]}
    }*/

    level[s.first][s.second] = 0;


    while(!q.empty())
    {
        pair<int,int>u;
        u = q.front();
        q.pop();

        for(int k=0; k<4;k++)
        {
            pair<int,int>v;
            v={u.first+dx[k],u.second+dy[k]};

            if(invalid(v.first,v.second) && level[v.first][v.second] == -1)
            {
                level[v.first][v.second] = level[u.first][u.second]+1;
                q.push(v);
            }
        }
    }

    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            cout<<level[i][j]<<" ";
        }
         cout<<endl;
    }

    cout<<level[d.first][d.second]<<endl;


}


 /* DFS
  9 8
  1 3
  1 2
  2 4
  2 5
  5 6
  3 7
  3 8
  8 9

  */

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>>adj;
vector<int>visited;

void dfs(int s)
{
    visited[s] = 1;
    cout<<s<<" ";

    sort(adj[s].begin(),adj[s].end());

    for(int i=0; i<adj[s].size(); i++)
    {
        int v = adj[s][i];

        if(!visited[v])
        {
            dfs(v);
        }
    }
}


int main()
{
    int n,m;
    cin>>n>>m;

    adj = vector<vector<int>>(n+1);
    visited = vector<int>(n+1,0);

    for(int i=0; i<m; i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1);
}



 /* DFS Cycle
  9 9
  1 2
  1 3
  2 4
  2 5
  5 6
  3 7
  3 8
  8 9
  3 5

  */

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>>adj;
vector<int>visited;
bool cycle =0;
void dfs(int s,int par)
{
    visited[s] = 1;
    cout<<s<<" ";
    for(int i=0; i<adj[s].size(); i++)
    {
        int v = adj[s][i];

        if(visited[v] == 1 && v!=par)
            cycle =1;

        if(!visited[v])
        {
            dfs(v,s);
        }
    }
    visited[s] = 2;
}


int main()
{
    int n,m;
    cin>>n>>m;

    adj = vector<vector<int>>(n+1);
    visited = vector<int>(n+1,0);

    for(int i=0; i<m; i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,-1);
}


/* Topological sot DFS
  9 8
  1 3
  1 2
  2 4
  2 5
  5 6
  3 7
  3 8
  8 9

  */

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>>adj;
vector<int>visited;
vector<int>st,en;

int timee = 1;

void dfs(int s)
{
    visited[s] = 1;
    cout<<s<<" ";
    st[s] = timee++;

    sort(adj[s].begin(),adj[s].end());

    for(int i=0; i<adj[s].size(); i++)
    {
        int v = adj[s][i];

        if(!visited[v])
        {
            dfs(v);
        }
    }
    en[s] = timee++;
}


int main()
{
    int n,m;
    cin>>n>>m;

    adj = vector<vector<int>>(n+1);
    visited = vector<int>(n+1,0);

    st = vector<int>(n+1,0);
    en = vector<int>(n+1,0);

    for(int i=0; i<m; i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1);
}



//priority queue

#include<bits/stdc++.h>
using namespace std;

struct edge{
int n,dis;
edge(int nn, int dd)
{
    n = nn;
    dis = dd;
}

  bool operator<(const edge &e)const
  {
      if(dis>e.dis)
        return true;
      else
        return false;
  }

};

int main()
{
    priority_queue<edge>pq;

    pq.push(edge(5,21));
    pq.push(edge(6,14));
    pq.push(edge(4,7));

    while(!pq.empty())
    {
        cout<<pq.top().n<<" ";
        cout<<pq.top().dis<<endl;
        pq.pop();
    }


    return 0;
}



  /* Dijkstra
   6 7
   1 2 1
   1 3 5
   1 4 7
   2 5 50
   3 5 20
   4 6 7
   6 5 7
   1
   5
   */

#include<bits/stdc++.h>
using namespace std;

struct edge{
int n,dis;
edge(int nn, int dd)
{
    n = nn;
    dis = dd;
}

  bool operator<(const edge &e)const
  {
      if(dis>e.dis)
        return true;
      else
        return false;
  }

};

int main()
{
    vector<int>adj[1000],wt[1000];
    int n,e;
    cin>>n>>e;
    vector<int>dis(n+1,1e9);
    for(int i=0; i<e; i++)
    {
        int u,v,w;
        cin>>u>>v>>w;
        adj[u].push_back(v);
        adj[v].push_back(u);

        wt[u].push_back(w);
        wt[v].push_back(w);

    }

    int s,end;
    cin>>s>>end;
    dis[s] = 0;

    priority_queue<edge>pq;
    pq.push(edge(s,0));

    while(!pq.empty())
    {
        edge u = pq.top();
        pq.pop();

        for(int i=0; i< adj[u.n].size(); i++)
        {
            int v = adj[u.n][i];
            int w = wt[u.n][i];

            if(dis[u.n] + w < dis[v])
            {
                dis[v] = dis[u.n] +w;
                pq.push(edge(v,dis[v]));
            }
        }
    }

    cout<<dis[end]<<endl;

    return 0;
}



  /* Floyd Warshall
    6 9
    1 2 1
    1 3 5
    2 3 2
    3 5 2
    2 5 1
    2 4 2
    4 5 3
    4 6 1
    5 6 2

    */

#include<bits/stdc++.h>
using namespace std;
const int N = 510;
const int INF = 1e9 +10;

int dist[N][N];

int main()
{
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            if(i==j)
                dist[i][j] = 0;
            else
                dist[i][j] = INF;
        }
    }

    int n,m;
    cin>>n>>m;
    for(int i=0; i<m; i++)
    {
        int x,y,wt;
        cin>>x>>y>>wt;

        dist[x][y] = wt;

    }

    for(int k=1; k<=n; ++k)
    {
        for(int i=1; i<=n; ++i)
        {
            for(int j=1; j<=n; ++j)
            {
                if(dist[i][k] !=INF && dist[k][j] != INF)
                   dist[i][j] = min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }

    for(int i=1; i<=n; ++i)
    {
        for(int j=1; j<=n; ++j)
        {
            if(dist[i][j] == INF)
                cout<<"I ";
            else
                cout<<dist[i][j]<<" ";
        }
        cout<<endl;
    }
}


/* MST
  6 9
  5 4 9
  1 4 1
  5 1 4
  4 3 5
  4 2 3
  1 2 2
  3 2 3
  3 6 8
  2 6 7
  */


#include<bits/stdc++.h>
using namespace std;
const int N = 510;
const int INF = 1e9 +10;

int parent[N],sz[N];

void make(int v)
{
    parent[v] = v;
    sz[v] = 1;
}

int find (int v)
{
    if(parent[v] == v)
        return parent[v];
    return parent[v] = find(parent[v]);
}

void Union(int a, int b)
{
    a = find(a);
    b = find(b);

    if(a != b)
    {
        if(sz[a] < sz[b])
             swap(a,b);
        parent[b] = a;
        sz[a] += sz[b];
    }
}


int main()
{
    int n,m;
    cin>>n>>m;

    vector<pair<int,pair<int,int>>>edges;

    for(int i=0; i<m; ++i)
    {
        int u,v,wt;
        cin>>u>>v>>wt;

        edges.push_back({wt,{u,v}});
    }
    sort(edges.begin(),edges.end());

    for(int i=1;i<=n; ++i)
        make(i);

    int total_cost = 0;

    for(auto &edge : edges)
    {
        int wt = edge.first;
        int u = edge.second.first;
        int v = edge.second.second;

        if(find(u) == find(v))
            continue;
        Union(u,v);
        total_cost += wt;
        cout<<u<<" "<<v<<endl;
    }
    cout<<total_cost<<endl;



}

